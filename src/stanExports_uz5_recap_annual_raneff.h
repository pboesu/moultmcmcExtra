// Generated by rstantools.  Do not edit by hand.

/*
    moultmcmcExtra is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    moultmcmcExtra is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with moultmcmcExtra.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.26.1-1-g67504470
#include <stan/model/model_header.hpp>
namespace model_uz5_recap_annual_raneff_namespace {
inline void validate_positive_index(const char* var_name, const char* expr,
                                    int val) {
  if (val < 1) {
    std::stringstream msg;
    msg << "Found dimension size less than one in simplex declaration"
        << "; variable=" << var_name << "; dimension size expression=" << expr
        << "; expression value=" << val;
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
inline void validate_unit_vector_index(const char* var_name, const char* expr,
                                       int val) {
  if (val <= 1) {
    std::stringstream msg;
    if (val == 1) {
      msg << "Found dimension size one in unit vector declaration."
          << " One-dimensional unit vector is discrete"
          << " but the target distribution must be continuous."
          << " variable=" << var_name << "; dimension size expression=" << expr;
    } else {
      msg << "Found dimension size less than one in unit vector declaration"
          << "; variable=" << var_name << "; dimension size expression=" << expr
          << "; expression value=" << val;
    }
    std::string msg_str(msg.str());
    throw std::invalid_argument(msg_str.c_str());
  }
}
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using std::pow;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::model_base_crtp;
using stan::model::rvalue;
using stan::model::cons_list;
using stan::model::index_uni;
using stan::model::index_max;
using stan::model::index_min;
using stan::model::index_min_max;
using stan::model::index_multi;
using stan::model::index_omni;
using stan::model::nil_index_list;
using namespace stan::math;
using stan::math::pow; 
stan::math::profile_map profiles__;
static int current_statement__= 0;
static const std::vector<string> locations_array__ = {" (found before start of program)",
                                                      " (in 'string', line 43, column 2 to column 28)",
                                                      " (in 'string', line 44, column 2 to column 30)",
                                                      " (in 'string', line 45, column 2 to column 34)",
                                                      " (in 'string', line 46, column 2 to column 23)",
                                                      " (in 'string', line 47, column 2 to column 30)",
                                                      " (in 'string', line 48, column 2 to column 34)",
                                                      " (in 'string', line 49, column 2 to column 31)",
                                                      " (in 'string', line 50, column 2 to column 35)",
                                                      " (in 'string', line 51, column 2 to column 29)",
                                                      " (in 'string', line 54, column 2 to column 44)",
                                                      " (in 'string', line 56, column 2 to column 69)",
                                                      " (in 'string', line 57, column 2 to column 104)",
                                                      " (in 'string', line 58, column 2 to column 35)",
                                                      " (in 'string', line 137, column 2 to column 19)",
                                                      " (in 'string', line 138, column 2 to column 18)",
                                                      " (in 'string', line 139, column 2 to column 21)",
                                                      " (in 'string', line 140, column 2 to column 20)",
                                                      " (in 'string', line 141, column 2 to column 27)",
                                                      " (in 'string', line 142, column 2 to column 28)",
                                                      " (in 'string', line 143, column 2 to column 30)",
                                                      " (in 'string', line 144, column 2 to column 32)",
                                                      " (in 'string', line 145, column 2 to column 32)",
                                                      " (in 'string', line 149, column 4 to column 31)",
                                                      " (in 'string', line 148, column 9 to line 150, column 3)",
                                                      " (in 'string', line 147, column 4 to column 61)",
                                                      " (in 'string', line 146, column 20 to line 148, column 3)",
                                                      " (in 'string', line 146, column 2 to line 150, column 3)",
                                                      " (in 'string', line 151, column 2 to column 49)",
                                                      " (in 'string', line 153, column 2 to column 56)",
                                                      " (in 'string', line 155, column 2 to column 36)",
                                                      " (in 'string', line 161, column 4 to column 52)",
                                                      " (in 'string', line 162, column 4 to column 58)",
                                                      " (in 'string', line 163, column 4 to column 41)",
                                                      " (in 'string', line 160, column 8 to line 164, column 2)",
                                                      " (in 'string', line 158, column 3 to column 81)",
                                                      " (in 'string', line 159, column 3 to column 26)",
                                                      " (in 'string', line 157, column 40 to line 160, column 2)",
                                                      " (in 'string', line 157, column 1 to line 164, column 2)",
                                                      " (in 'string', line 156, column 19 to line 165, column 1)",
                                                      " (in 'string', line 156, column 0 to line 165, column 1)",
                                                      " (in 'string', line 171, column 3 to column 83)",
                                                      " (in 'string', line 172, column 3 to column 130)",
                                                      " (in 'string', line 173, column 3 to column 40)",
                                                      " (in 'string', line 170, column 9 to line 174, column 3)",
                                                      " (in 'string', line 168, column 3 to column 136)",
                                                      " (in 'string', line 169, column 3 to column 25)",
                                                      " (in 'string', line 167, column 49 to line 170, column 3)",
                                                      " (in 'string', line 167, column 2 to line 174, column 3)",
                                                      " (in 'string', line 166, column 20 to line 175, column 1)",
                                                      " (in 'string', line 166, column 0 to line 175, column 1)",
                                                      " (in 'string', line 62, column 9 to column 14)",
                                                      " (in 'string', line 62, column 2 to column 19)",
                                                      " (in 'string', line 63, column 9 to column 14)",
                                                      " (in 'string', line 63, column 2 to column 18)",
                                                      " (in 'string', line 64, column 9 to column 16)",
                                                      " (in 'string', line 64, column 2 to column 21)",
                                                      " (in 'string', line 65, column 9 to column 16)",
                                                      " (in 'string', line 65, column 2 to column 20)",
                                                      " (in 'string', line 66, column 9 to column 22)",
                                                      " (in 'string', line 66, column 2 to column 27)",
                                                      " (in 'string', line 67, column 9 to column 22)",
                                                      " (in 'string', line 67, column 2 to column 28)",
                                                      " (in 'string', line 68, column 9 to column 22)",
                                                      " (in 'string', line 68, column 2 to column 30)",
                                                      " (in 'string', line 69, column 2 to column 49)",
                                                      " (in 'string', line 71, column 2 to column 56)",
                                                      " (in 'string', line 73, column 2 to column 36)",
                                                      " (in 'string', line 78, column 4 to column 52)",
                                                      " (in 'string', line 79, column 4 to column 58)",
                                                      " (in 'string', line 77, column 8 to line 80, column 2)",
                                                      " (in 'string', line 76, column 3 to column 81)",
                                                      " (in 'string', line 75, column 40 to line 77, column 2)",
                                                      " (in 'string', line 75, column 1 to line 80, column 2)",
                                                      " (in 'string', line 74, column 19 to line 81, column 1)",
                                                      " (in 'string', line 74, column 0 to line 81, column 1)",
                                                      " (in 'string', line 86, column 3 to column 83)",
                                                      " (in 'string', line 87, column 3 to column 130)",
                                                      " (in 'string', line 85, column 9 to line 88, column 3)",
                                                      " (in 'string', line 84, column 3 to column 136)",
                                                      " (in 'string', line 83, column 49 to line 85, column 3)",
                                                      " (in 'string', line 83, column 2 to line 88, column 3)",
                                                      " (in 'string', line 82, column 20 to line 89, column 1)",
                                                      " (in 'string', line 82, column 0 to line 89, column 1)",
                                                      " (in 'string', line 90, column 0 to column 98)",
                                                      " (in 'string', line 106, column 0 to column 107)",
                                                      " (in 'string', line 108, column 0 to column 38)",
                                                      " (in 'string', line 109, column 0 to column 46)",
                                                      " (in 'string', line 111, column 31 to column 34)",
                                                      " (in 'string', line 111, column 29 to column 30)",
                                                      " (in 'string', line 111, column 0 to column 36)",
                                                      " (in 'string', line 112, column 32 to column 35)",
                                                      " (in 'string', line 112, column 30 to column 31)",
                                                      " (in 'string', line 112, column 0 to column 37)",
                                                      " (in 'string', line 113, column 0 to column 28)",
                                                      " (in 'string', line 114, column 0 to column 27)",
                                                      " (in 'string', line 118, column 5 to column 36)",
                                                      " (in 'string', line 117, column 25 to line 119, column 4)",
                                                      " (in 'string', line 117, column 3 to line 119, column 4)",
                                                      " (in 'string', line 116, column 20 to line 120, column 3)",
                                                      " (in 'string', line 116, column 2 to line 120, column 3)",
                                                      " (in 'string', line 123, column 5 to column 37)",
                                                      " (in 'string', line 122, column 26 to line 124, column 4)",
                                                      " (in 'string', line 122, column 3 to line 124, column 4)",
                                                      " (in 'string', line 121, column 21 to line 125, column 3)",
                                                      " (in 'string', line 121, column 2 to line 125, column 3)",
                                                      " (in 'string', line 128, column 5 to column 39)",
                                                      " (in 'string', line 127, column 28 to line 129, column 4)",
                                                      " (in 'string', line 127, column 3 to line 129, column 4)",
                                                      " (in 'string', line 126, column 23 to line 130, column 3)",
                                                      " (in 'string', line 126, column 2 to line 130, column 3)",
                                                      " (in 'string', line 115, column 16 to line 131, column 1)",
                                                      " (in 'string', line 115, column 0 to line 131, column 1)",
                                                      " (in 'string', line 132, column 0 to column 27)",
                                                      " (in 'string', line 133, column 0 to column 31)",
                                                      " (in 'string', line 6, column 2 to column 21)",
                                                      " (in 'string', line 7, column 2 to column 25)",
                                                      " (in 'string', line 8, column 2 to column 21)",
                                                      " (in 'string', line 9, column 9 to column 14)",
                                                      " (in 'string', line 9, column 2 to column 26)",
                                                      " (in 'string', line 10, column 2 to column 23)",
                                                      " (in 'string', line 11, column 2 to column 31)",
                                                      " (in 'string', line 12, column 2 to column 39)",
                                                      " (in 'string', line 13, column 2 to column 41)",
                                                      " (in 'string', line 14, column 9 to column 16)",
                                                      " (in 'string', line 14, column 2 to column 30)",
                                                      " (in 'string', line 15, column 26 to column 33)",
                                                      " (in 'string', line 15, column 2 to column 49)",
                                                      " (in 'string', line 16, column 25 to column 38)",
                                                      " (in 'string', line 16, column 2 to column 40)",
                                                      " (in 'string', line 17, column 37 to column 42)",
                                                      " (in 'string', line 17, column 2 to column 44)",
                                                      " (in 'string', line 18, column 25 to column 40)",
                                                      " (in 'string', line 18, column 2 to column 42)",
                                                      " (in 'string', line 19, column 29 to column 64)",
                                                      " (in 'string', line 19, column 2 to column 66)",
                                                      " (in 'string', line 20, column 33 to column 56)",
                                                      " (in 'string', line 20, column 2 to column 58)",
                                                      " (in 'string', line 21, column 35 to column 60)",
                                                      " (in 'string', line 21, column 2 to column 62)",
                                                      " (in 'string', line 22, column 28 to column 33)",
                                                      " (in 'string', line 22, column 2 to column 35)",
                                                      " (in 'string', line 23, column 37 to column 46)",
                                                      " (in 'string', line 23, column 2 to column 48)",
                                                      " (in 'string', line 27, column 2 to column 16)",
                                                      " (in 'string', line 28, column 9 to column 22)",
                                                      " (in 'string', line 28, column 23 to column 32)",
                                                      " (in 'string', line 28, column 2 to column 39)",
                                                      " (in 'string', line 29, column 2 to column 17)",
                                                      " (in 'string', line 30, column 9 to column 22)",
                                                      " (in 'string', line 30, column 23 to column 33)",
                                                      " (in 'string', line 30, column 2 to column 41)",
                                                      " (in 'string', line 31, column 2 to column 19)",
                                                      " (in 'string', line 32, column 9 to column 22)",
                                                      " (in 'string', line 32, column 23 to column 35)",
                                                      " (in 'string', line 32, column 2 to column 45)",
                                                      " (in 'string', line 34, column 2 to column 15)",
                                                      " (in 'string', line 35, column 18 to column 31)",
                                                      " (in 'string', line 35, column 2 to column 33)",
                                                      " (in 'string', line 36, column 2 to column 14)",
                                                      " (in 'string', line 43, column 9 to column 18)",
                                                      " (in 'string', line 44, column 9 to column 19)",
                                                      " (in 'string', line 45, column 9 to column 21)",
                                                      " (in 'string', line 46, column 9 to column 14)",
                                                      " (in 'string', line 47, column 9 to column 16)",
                                                      " (in 'string', line 48, column 9 to column 16)",
                                                      " (in 'string', line 57, column 9 to column 18)",
                                                      " (in 'string', line 137, column 9 to column 14)",
                                                      " (in 'string', line 138, column 9 to column 14)",
                                                      " (in 'string', line 139, column 9 to column 16)",
                                                      " (in 'string', line 140, column 9 to column 16)",
                                                      " (in 'string', line 141, column 9 to column 22)",
                                                      " (in 'string', line 142, column 9 to column 22)",
                                                      " (in 'string', line 143, column 9 to column 22)",
                                                      " (in 'string', line 144, column 9 to column 22)",
                                                      " (in 'string', line 145, column 9 to column 18)"};
#include <stan_meta_header.hpp>
class model_uz5_recap_annual_raneff final : public model_base_crtp<model_uz5_recap_annual_raneff> {
private:
  int N_ind;
  int N_ind_rep;
  int N_old;
  Eigen::Matrix<double, -1, 1> old_dates;
  int N_moult;
  int Nobs_replicated;
  int Nobs_not_replicated_old;
  int Nobs_not_replicated_moult;
  Eigen::Matrix<double, -1, 1> moult_dates;
  Eigen::Matrix<double, -1, 1> moult_indices;
  std::vector<int> individual;
  std::vector<int> individual_first_index;
  std::vector<int> replicated;
  std::vector<int> not_replicated;
  std::vector<int> not_replicated_old;
  std::vector<int> not_replicated_moult;
  std::vector<int> is_replicated;
  std::vector<int> replicated_individuals;
  int N_pred_mu;
  Eigen::Matrix<double, -1, -1> X_mu;
  int N_pred_tau;
  Eigen::Matrix<double, -1, -1> X_tau;
  int N_pred_sigma;
  Eigen::Matrix<double, -1, -1> X_sigma;
  double beta_sd;
  std::vector<int> year_factor;
  int N_years;
  int mu_1dim__;
  int tau_1dim__;
  int sigma_1dim__;
  int log_lik_1dim__;
 
public:
  ~model_uz5_recap_annual_raneff() { }
  
  inline std::string model_name() const final { return "model_uz5_recap_annual_raneff"; }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.26.1-1-g67504470", "stancflags = "};
  }
  
  
  model_uz5_recap_annual_raneff(stan::io::var_context& context__,
                                unsigned int random_seed__ = 0,
                                std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static const char* function__ = "model_uz5_recap_annual_raneff_namespace::model_uz5_recap_annual_raneff";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      current_statement__ = 115;
      context__.validate_dims("data initialization","N_ind","int",
          context__.to_vec());
      N_ind = std::numeric_limits<int>::min();
      
      current_statement__ = 115;
      N_ind = context__.vals_i("N_ind")[(1 - 1)];
      current_statement__ = 115;
      current_statement__ = 115;
      check_greater_or_equal(function__, "N_ind", N_ind, 0);
      current_statement__ = 116;
      context__.validate_dims("data initialization","N_ind_rep","int",
          context__.to_vec());
      N_ind_rep = std::numeric_limits<int>::min();
      
      current_statement__ = 116;
      N_ind_rep = context__.vals_i("N_ind_rep")[(1 - 1)];
      current_statement__ = 116;
      current_statement__ = 116;
      check_greater_or_equal(function__, "N_ind_rep", N_ind_rep, 0);
      current_statement__ = 117;
      context__.validate_dims("data initialization","N_old","int",
          context__.to_vec());
      N_old = std::numeric_limits<int>::min();
      
      current_statement__ = 117;
      N_old = context__.vals_i("N_old")[(1 - 1)];
      current_statement__ = 117;
      current_statement__ = 117;
      check_greater_or_equal(function__, "N_old", N_old, 0);
      current_statement__ = 118;
      validate_non_negative_index("old_dates", "N_old", N_old);
      current_statement__ = 119;
      context__.validate_dims("data initialization","old_dates","double",
          context__.to_vec(N_old));
      old_dates = Eigen::Matrix<double, -1, 1>(N_old);
      stan::math::fill(old_dates, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> old_dates_flat__;
        current_statement__ = 119;
        assign(old_dates_flat__, nil_index_list(),
          context__.vals_r("old_dates"),
          "assigning variable old_dates_flat__");
        current_statement__ = 119;
        pos__ = 1;
        current_statement__ = 119;
        for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
          current_statement__ = 119;
          assign(old_dates, cons_list(index_uni(sym1__), nil_index_list()),
            old_dates_flat__[(pos__ - 1)], "assigning variable old_dates");
          current_statement__ = 119;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 120;
      context__.validate_dims("data initialization","N_moult","int",
          context__.to_vec());
      N_moult = std::numeric_limits<int>::min();
      
      current_statement__ = 120;
      N_moult = context__.vals_i("N_moult")[(1 - 1)];
      current_statement__ = 120;
      current_statement__ = 120;
      check_greater_or_equal(function__, "N_moult", N_moult, 0);
      current_statement__ = 121;
      context__.validate_dims("data initialization","Nobs_replicated","int",
          context__.to_vec());
      Nobs_replicated = std::numeric_limits<int>::min();
      
      current_statement__ = 121;
      Nobs_replicated = context__.vals_i("Nobs_replicated")[(1 - 1)];
      current_statement__ = 121;
      current_statement__ = 121;
      check_greater_or_equal(function__, "Nobs_replicated", Nobs_replicated,
                             0);
      current_statement__ = 122;
      context__.validate_dims("data initialization",
          "Nobs_not_replicated_old","int",context__.to_vec());
      Nobs_not_replicated_old = std::numeric_limits<int>::min();
      
      current_statement__ = 122;
      Nobs_not_replicated_old = context__.vals_i("Nobs_not_replicated_old")[
          (1 - 1)];
      current_statement__ = 122;
      current_statement__ = 122;
      check_greater_or_equal(function__, "Nobs_not_replicated_old",
                             Nobs_not_replicated_old, 0);
      current_statement__ = 123;
      context__.validate_dims("data initialization",
          "Nobs_not_replicated_moult","int",context__.to_vec());
      Nobs_not_replicated_moult = std::numeric_limits<int>::min();
      
      current_statement__ = 123;
      Nobs_not_replicated_moult = context__.vals_i("Nobs_not_replicated_moult")[
          (1 - 1)];
      current_statement__ = 123;
      current_statement__ = 123;
      check_greater_or_equal(function__, "Nobs_not_replicated_moult",
                             Nobs_not_replicated_moult, 0);
      current_statement__ = 124;
      validate_non_negative_index("moult_dates", "N_moult", N_moult);
      current_statement__ = 125;
      context__.validate_dims("data initialization","moult_dates","double",
          context__.to_vec(N_moult));
      moult_dates = Eigen::Matrix<double, -1, 1>(N_moult);
      stan::math::fill(moult_dates, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> moult_dates_flat__;
        current_statement__ = 125;
        assign(moult_dates_flat__, nil_index_list(),
          context__.vals_r("moult_dates"),
          "assigning variable moult_dates_flat__");
        current_statement__ = 125;
        pos__ = 1;
        current_statement__ = 125;
        for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
          current_statement__ = 125;
          assign(moult_dates, cons_list(index_uni(sym1__), nil_index_list()),
            moult_dates_flat__[(pos__ - 1)], "assigning variable moult_dates");
          current_statement__ = 125;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 126;
      validate_non_negative_index("moult_indices", "N_moult", N_moult);
      current_statement__ = 127;
      context__.validate_dims("data initialization","moult_indices","double",
          context__.to_vec(N_moult));
      moult_indices = Eigen::Matrix<double, -1, 1>(N_moult);
      stan::math::fill(moult_indices, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> moult_indices_flat__;
        current_statement__ = 127;
        assign(moult_indices_flat__, nil_index_list(),
          context__.vals_r("moult_indices"),
          "assigning variable moult_indices_flat__");
        current_statement__ = 127;
        pos__ = 1;
        current_statement__ = 127;
        for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
          current_statement__ = 127;
          assign(moult_indices,
            cons_list(index_uni(sym1__), nil_index_list()),
            moult_indices_flat__[(pos__ - 1)],
            "assigning variable moult_indices");
          current_statement__ = 127;
          pos__ = (pos__ + 1);}
      }
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_greater_or_equal(function__, "moult_indices[sym1__]",
                               moult_indices[(sym1__ - 1)], 0);}
      current_statement__ = 127;
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        current_statement__ = 127;
        current_statement__ = 127;
        check_less_or_equal(function__, "moult_indices[sym1__]",
                            moult_indices[(sym1__ - 1)], 1);}
      current_statement__ = 128;
      validate_non_negative_index("individual", "N_moult + N_old",
                                  (N_moult + N_old));
      current_statement__ = 129;
      context__.validate_dims("data initialization","individual","int",
          context__.to_vec((N_moult + N_old)));
      individual = std::vector<int>((N_moult + N_old), std::numeric_limits<int>::min());
      
      current_statement__ = 129;
      assign(individual, nil_index_list(), context__.vals_i("individual"),
        "assigning variable individual");
      current_statement__ = 129;
      for (int sym1__ = 1; sym1__ <= (N_moult + N_old); ++sym1__) {
        current_statement__ = 129;
        current_statement__ = 129;
        check_greater_or_equal(function__, "individual[sym1__]",
                               individual[(sym1__ - 1)], 0);}
      current_statement__ = 130;
      validate_non_negative_index("individual_first_index", "N_ind", N_ind);
      current_statement__ = 131;
      context__.validate_dims("data initialization","individual_first_index",
          "int",context__.to_vec(N_ind));
      individual_first_index = std::vector<int>(N_ind, std::numeric_limits<int>::min());
      
      current_statement__ = 131;
      assign(individual_first_index, nil_index_list(),
        context__.vals_i("individual_first_index"),
        "assigning variable individual_first_index");
      current_statement__ = 131;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 131;
        current_statement__ = 131;
        check_greater_or_equal(function__, "individual_first_index[sym1__]",
                               individual_first_index[(sym1__ - 1)], 0);}
      current_statement__ = 132;
      validate_non_negative_index("replicated", "Nobs_replicated",
                                  Nobs_replicated);
      current_statement__ = 133;
      context__.validate_dims("data initialization","replicated","int",
          context__.to_vec(Nobs_replicated));
      replicated = std::vector<int>(Nobs_replicated, std::numeric_limits<int>::min());
      
      current_statement__ = 133;
      assign(replicated, nil_index_list(), context__.vals_i("replicated"),
        "assigning variable replicated");
      current_statement__ = 133;
      for (int sym1__ = 1; sym1__ <= Nobs_replicated; ++sym1__) {
        current_statement__ = 133;
        current_statement__ = 133;
        check_greater_or_equal(function__, "replicated[sym1__]",
                               replicated[(sym1__ - 1)], 0);}
      current_statement__ = 134;
      validate_non_negative_index("not_replicated",
                                  "(N_moult + N_old) - Nobs_replicated",
                                  ((N_moult + N_old) - Nobs_replicated));
      current_statement__ = 135;
      context__.validate_dims("data initialization","not_replicated","int",
          context__.to_vec(((N_moult + N_old) - Nobs_replicated)));
      not_replicated = std::vector<int>(((N_moult + N_old) - Nobs_replicated), std::numeric_limits<int>::min());
      
      current_statement__ = 135;
      assign(not_replicated, nil_index_list(),
        context__.vals_i("not_replicated"),
        "assigning variable not_replicated");
      current_statement__ = 135;
      for (int sym1__ = 1; sym1__ <= ((N_moult + N_old) - Nobs_replicated);
           ++sym1__) {
        current_statement__ = 135;
        current_statement__ = 135;
        check_greater_or_equal(function__, "not_replicated[sym1__]",
                               not_replicated[(sym1__ - 1)], 0);}
      current_statement__ = 136;
      validate_non_negative_index("not_replicated_old",
                                  "Nobs_not_replicated_old",
                                  Nobs_not_replicated_old);
      current_statement__ = 137;
      context__.validate_dims("data initialization","not_replicated_old",
          "int",context__.to_vec(Nobs_not_replicated_old));
      not_replicated_old = std::vector<int>(Nobs_not_replicated_old, std::numeric_limits<int>::min());
      
      current_statement__ = 137;
      assign(not_replicated_old, nil_index_list(),
        context__.vals_i("not_replicated_old"),
        "assigning variable not_replicated_old");
      current_statement__ = 137;
      for (int sym1__ = 1; sym1__ <= Nobs_not_replicated_old; ++sym1__) {
        current_statement__ = 137;
        current_statement__ = 137;
        check_greater_or_equal(function__, "not_replicated_old[sym1__]",
                               not_replicated_old[(sym1__ - 1)], 0);}
      current_statement__ = 138;
      validate_non_negative_index("not_replicated_moult",
                                  "Nobs_not_replicated_moult",
                                  Nobs_not_replicated_moult);
      current_statement__ = 139;
      context__.validate_dims("data initialization","not_replicated_moult",
          "int",context__.to_vec(Nobs_not_replicated_moult));
      not_replicated_moult = std::vector<int>(Nobs_not_replicated_moult, std::numeric_limits<int>::min());
      
      current_statement__ = 139;
      assign(not_replicated_moult, nil_index_list(),
        context__.vals_i("not_replicated_moult"),
        "assigning variable not_replicated_moult");
      current_statement__ = 139;
      for (int sym1__ = 1; sym1__ <= Nobs_not_replicated_moult; ++sym1__) {
        current_statement__ = 139;
        current_statement__ = 139;
        check_greater_or_equal(function__, "not_replicated_moult[sym1__]",
                               not_replicated_moult[(sym1__ - 1)], 0);}
      current_statement__ = 140;
      validate_non_negative_index("is_replicated", "N_ind", N_ind);
      current_statement__ = 141;
      context__.validate_dims("data initialization","is_replicated","int",
          context__.to_vec(N_ind));
      is_replicated = std::vector<int>(N_ind, std::numeric_limits<int>::min());
      
      current_statement__ = 141;
      assign(is_replicated, nil_index_list(),
        context__.vals_i("is_replicated"), "assigning variable is_replicated");
      current_statement__ = 141;
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        current_statement__ = 141;
        current_statement__ = 141;
        check_greater_or_equal(function__, "is_replicated[sym1__]",
                               is_replicated[(sym1__ - 1)], 0);}
      current_statement__ = 142;
      validate_non_negative_index("replicated_individuals", "N_ind_rep",
                                  N_ind_rep);
      current_statement__ = 143;
      context__.validate_dims("data initialization","replicated_individuals",
          "int",context__.to_vec(N_ind_rep));
      replicated_individuals = std::vector<int>(N_ind_rep, std::numeric_limits<int>::min());
      
      current_statement__ = 143;
      assign(replicated_individuals, nil_index_list(),
        context__.vals_i("replicated_individuals"),
        "assigning variable replicated_individuals");
      current_statement__ = 143;
      for (int sym1__ = 1; sym1__ <= N_ind_rep; ++sym1__) {
        current_statement__ = 143;
        current_statement__ = 143;
        check_greater_or_equal(function__, "replicated_individuals[sym1__]",
                               replicated_individuals[(sym1__ - 1)], 0);}
      current_statement__ = 144;
      context__.validate_dims("data initialization","N_pred_mu","int",
          context__.to_vec());
      N_pred_mu = std::numeric_limits<int>::min();
      
      current_statement__ = 144;
      N_pred_mu = context__.vals_i("N_pred_mu")[(1 - 1)];
      current_statement__ = 145;
      validate_non_negative_index("X_mu", "N_old + N_moult",
                                  (N_old + N_moult));
      current_statement__ = 146;
      validate_non_negative_index("X_mu", "N_pred_mu", N_pred_mu);
      current_statement__ = 147;
      context__.validate_dims("data initialization","X_mu","double",
          context__.to_vec((N_old + N_moult), N_pred_mu));
      X_mu = Eigen::Matrix<double, -1, -1>((N_old + N_moult), N_pred_mu);
      stan::math::fill(X_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_mu_flat__;
        current_statement__ = 147;
        assign(X_mu_flat__, nil_index_list(), context__.vals_r("X_mu"),
          "assigning variable X_mu_flat__");
        current_statement__ = 147;
        pos__ = 1;
        current_statement__ = 147;
        for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
          current_statement__ = 147;
          for (int sym2__ = 1; sym2__ <= (N_old + N_moult); ++sym2__) {
            current_statement__ = 147;
            assign(X_mu,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_mu_flat__[(pos__ - 1)], "assigning variable X_mu");
            current_statement__ = 147;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 148;
      context__.validate_dims("data initialization","N_pred_tau","int",
          context__.to_vec());
      N_pred_tau = std::numeric_limits<int>::min();
      
      current_statement__ = 148;
      N_pred_tau = context__.vals_i("N_pred_tau")[(1 - 1)];
      current_statement__ = 149;
      validate_non_negative_index("X_tau", "N_old + N_moult",
                                  (N_old + N_moult));
      current_statement__ = 150;
      validate_non_negative_index("X_tau", "N_pred_tau", N_pred_tau);
      current_statement__ = 151;
      context__.validate_dims("data initialization","X_tau","double",
          context__.to_vec((N_old + N_moult), N_pred_tau));
      X_tau = Eigen::Matrix<double, -1, -1>((N_old + N_moult), N_pred_tau);
      stan::math::fill(X_tau, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_tau_flat__;
        current_statement__ = 151;
        assign(X_tau_flat__, nil_index_list(), context__.vals_r("X_tau"),
          "assigning variable X_tau_flat__");
        current_statement__ = 151;
        pos__ = 1;
        current_statement__ = 151;
        for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
          current_statement__ = 151;
          for (int sym2__ = 1; sym2__ <= (N_old + N_moult); ++sym2__) {
            current_statement__ = 151;
            assign(X_tau,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_tau_flat__[(pos__ - 1)], "assigning variable X_tau");
            current_statement__ = 151;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 152;
      context__.validate_dims("data initialization","N_pred_sigma","int",
          context__.to_vec());
      N_pred_sigma = std::numeric_limits<int>::min();
      
      current_statement__ = 152;
      N_pred_sigma = context__.vals_i("N_pred_sigma")[(1 - 1)];
      current_statement__ = 153;
      validate_non_negative_index("X_sigma", "N_old + N_moult",
                                  (N_old + N_moult));
      current_statement__ = 154;
      validate_non_negative_index("X_sigma", "N_pred_sigma", N_pred_sigma);
      current_statement__ = 155;
      context__.validate_dims("data initialization","X_sigma","double",
          context__.to_vec((N_old + N_moult), N_pred_sigma));
      X_sigma = Eigen::Matrix<double, -1, -1>((N_old + N_moult), N_pred_sigma);
      stan::math::fill(X_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> X_sigma_flat__;
        current_statement__ = 155;
        assign(X_sigma_flat__, nil_index_list(), context__.vals_r("X_sigma"),
          "assigning variable X_sigma_flat__");
        current_statement__ = 155;
        pos__ = 1;
        current_statement__ = 155;
        for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
          current_statement__ = 155;
          for (int sym2__ = 1; sym2__ <= (N_old + N_moult); ++sym2__) {
            current_statement__ = 155;
            assign(X_sigma,
              cons_list(index_uni(sym2__),
                cons_list(index_uni(sym1__), nil_index_list())),
              X_sigma_flat__[(pos__ - 1)], "assigning variable X_sigma");
            current_statement__ = 155;
            pos__ = (pos__ + 1);}}
      }
      current_statement__ = 156;
      context__.validate_dims("data initialization","beta_sd","double",
          context__.to_vec());
      beta_sd = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 156;
      beta_sd = context__.vals_r("beta_sd")[(1 - 1)];
      current_statement__ = 157;
      validate_non_negative_index("year_factor", "N_old + N_moult",
                                  (N_old + N_moult));
      current_statement__ = 158;
      context__.validate_dims("data initialization","year_factor","int",
          context__.to_vec((N_old + N_moult)));
      year_factor = std::vector<int>((N_old + N_moult), std::numeric_limits<int>::min());
      
      current_statement__ = 158;
      assign(year_factor, nil_index_list(), context__.vals_i("year_factor"),
        "assigning variable year_factor");
      current_statement__ = 159;
      context__.validate_dims("data initialization","N_years","int",
          context__.to_vec());
      N_years = std::numeric_limits<int>::min();
      
      current_statement__ = 159;
      N_years = context__.vals_i("N_years")[(1 - 1)];
      current_statement__ = 160;
      validate_non_negative_index("beta_mu", "N_pred_mu", N_pred_mu);
      current_statement__ = 161;
      validate_non_negative_index("beta_tau", "N_pred_tau", N_pred_tau);
      current_statement__ = 162;
      validate_non_negative_index("beta_sigma", "N_pred_sigma", N_pred_sigma);
      current_statement__ = 163;
      validate_non_negative_index("mu_ind", "N_ind", N_ind);
      current_statement__ = 164;
      validate_non_negative_index("u_year_mean", "N_years", N_years);
      current_statement__ = 165;
      validate_non_negative_index("u_year_duration", "N_years", N_years);
      current_statement__ = 166;
      validate_non_negative_index("mu_ind_star", "N_ind_rep", N_ind_rep);
      current_statement__ = 167;
      validate_non_negative_index("Rt", "N_old", N_old);
      current_statement__ = 168;
      validate_non_negative_index("P", "N_old", N_old);
      current_statement__ = 169;
      validate_non_negative_index("Ru", "N_moult", N_moult);
      current_statement__ = 170;
      validate_non_negative_index("q", "N_moult", N_moult);
      current_statement__ = 171;
      mu_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 171;
      mu_1dim__ = (N_old + N_moult);
      current_statement__ = 171;
      validate_non_negative_index("mu", "N_old + N_moult", mu_1dim__);
      current_statement__ = 172;
      tau_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 172;
      tau_1dim__ = (N_old + N_moult);
      current_statement__ = 172;
      validate_non_negative_index("tau", "N_old + N_moult", tau_1dim__);
      current_statement__ = 173;
      sigma_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 173;
      sigma_1dim__ = (N_old + N_moult);
      current_statement__ = 173;
      validate_non_negative_index("sigma", "N_old + N_moult", sigma_1dim__);
      current_statement__ = 174;
      log_lik_1dim__ = std::numeric_limits<int>::min();
      
      current_statement__ = 174;
      log_lik_1dim__ = (N_old + N_moult);
      current_statement__ = 174;
      validate_non_negative_index("log_lik", "N_old + N_moult",
                                  log_lik_1dim__);
      current_statement__ = 175;
      validate_non_negative_index("beta_mu_out", "N_pred_mu", N_pred_mu);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    num_params_r__ = 0U;
    
    try {
      num_params_r__ += N_pred_mu;
      num_params_r__ += N_pred_tau;
      num_params_r__ += N_pred_sigma;
      num_params_r__ += N_ind;
      num_params_r__ += N_years;
      num_params_r__ += N_years;
      num_params_r__ += 1;
      num_params_r__ += 1;
      num_params_r__ += 1;
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI, stan::require_vector_like_t<VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    static const char* function__ = "model_uz5_recap_annual_raneff_namespace::log_prob";
(void) function__;  // suppress unused var warning
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_mu;
      beta_mu = Eigen::Matrix<local_scalar_t__, -1, 1>(N_pred_mu);
      stan::math::fill(beta_mu, DUMMY_VAR__);
      
      current_statement__ = 1;
      beta_mu = in__.vector(N_pred_mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_tau;
      beta_tau = Eigen::Matrix<local_scalar_t__, -1, 1>(N_pred_tau);
      stan::math::fill(beta_tau, DUMMY_VAR__);
      
      current_statement__ = 2;
      beta_tau = in__.vector(N_pred_tau);
      Eigen::Matrix<local_scalar_t__, -1, 1> beta_sigma;
      beta_sigma = Eigen::Matrix<local_scalar_t__, -1, 1>(N_pred_sigma);
      stan::math::fill(beta_sigma, DUMMY_VAR__);
      
      current_statement__ = 3;
      beta_sigma = in__.vector(N_pred_sigma);
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_ind;
      mu_ind = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ind);
      stan::math::fill(mu_ind, DUMMY_VAR__);
      
      current_statement__ = 4;
      mu_ind = in__.vector(N_ind);
      Eigen::Matrix<local_scalar_t__, -1, 1> u_year_mean;
      u_year_mean = Eigen::Matrix<local_scalar_t__, -1, 1>(N_years);
      stan::math::fill(u_year_mean, DUMMY_VAR__);
      
      current_statement__ = 5;
      u_year_mean = in__.vector(N_years);
      Eigen::Matrix<local_scalar_t__, -1, 1> u_year_duration;
      u_year_duration = Eigen::Matrix<local_scalar_t__, -1, 1>(N_years);
      stan::math::fill(u_year_duration, DUMMY_VAR__);
      
      current_statement__ = 6;
      u_year_duration = in__.vector(N_years);
      local_scalar_t__ sd_year_mean;
      sd_year_mean = DUMMY_VAR__;
      
      current_statement__ = 7;
      sd_year_mean = in__.scalar();
      current_statement__ = 7;
      if (jacobian__) {
        current_statement__ = 7;
        sd_year_mean = stan::math::lb_constrain(sd_year_mean, 0, lp__);
      } else {
        current_statement__ = 7;
        sd_year_mean = stan::math::lb_constrain(sd_year_mean, 0);
      }
      local_scalar_t__ sd_year_duration;
      sd_year_duration = DUMMY_VAR__;
      
      current_statement__ = 8;
      sd_year_duration = in__.scalar();
      current_statement__ = 8;
      if (jacobian__) {
        current_statement__ = 8;
        sd_year_duration = stan::math::lb_constrain(sd_year_duration, 0, lp__);
      } else {
        current_statement__ = 8;
        sd_year_duration = stan::math::lb_constrain(sd_year_duration, 0);
      }
      local_scalar_t__ sigma_mu_ind;
      sigma_mu_ind = DUMMY_VAR__;
      
      current_statement__ = 9;
      sigma_mu_ind = in__.scalar();
      current_statement__ = 9;
      if (jacobian__) {
        current_statement__ = 9;
        sigma_mu_ind = stan::math::lb_constrain(sigma_mu_ind, 0, lp__);
      } else {
        current_statement__ = 9;
        sigma_mu_ind = stan::math::lb_constrain(sigma_mu_ind, 0);
      }
      local_scalar_t__ sigma_intercept;
      sigma_intercept = DUMMY_VAR__;
      
      current_statement__ = 10;
      sigma_intercept = stan::math::exp(beta_sigma[(1 - 1)]);
      local_scalar_t__ beta_star;
      beta_star = DUMMY_VAR__;
      
      current_statement__ = 11;
      beta_star = (beta_mu[(1 - 1)] +
                    mean(
                      rvalue(mu_ind,
                        cons_list(index_multi(replicated_individuals),
                          nil_index_list()), "mu_ind")));
      Eigen::Matrix<local_scalar_t__, -1, 1> mu_ind_star;
      mu_ind_star = Eigen::Matrix<local_scalar_t__, -1, 1>(N_ind_rep);
      stan::math::fill(mu_ind_star, DUMMY_VAR__);
      
      current_statement__ = 12;
      assign(mu_ind_star, nil_index_list(),
        subtract(
          rvalue(mu_ind,
            cons_list(index_multi(replicated_individuals), nil_index_list()),
            "mu_ind"),
          mean(
            rvalue(mu_ind,
              cons_list(index_multi(replicated_individuals),
                nil_index_list()), "mu_ind"))),
        "assigning variable mu_ind_star");
      local_scalar_t__ finite_sd;
      finite_sd = DUMMY_VAR__;
      
      current_statement__ = 13;
      finite_sd = sd(mu_ind_star);
      {
        current_statement__ = 51;
        validate_non_negative_index("Rt", "N_old", N_old);
        Eigen::Matrix<local_scalar_t__, -1, 1> Rt;
        Rt = Eigen::Matrix<local_scalar_t__, -1, 1>(N_old);
        stan::math::fill(Rt, DUMMY_VAR__);
        
        current_statement__ = 53;
        validate_non_negative_index("P", "N_old", N_old);
        Eigen::Matrix<local_scalar_t__, -1, 1> P;
        P = Eigen::Matrix<local_scalar_t__, -1, 1>(N_old);
        stan::math::fill(P, DUMMY_VAR__);
        
        current_statement__ = 55;
        validate_non_negative_index("Ru", "N_moult", N_moult);
        Eigen::Matrix<local_scalar_t__, -1, 1> Ru;
        Ru = Eigen::Matrix<local_scalar_t__, -1, 1>(N_moult);
        stan::math::fill(Ru, DUMMY_VAR__);
        
        current_statement__ = 57;
        validate_non_negative_index("q", "N_moult", N_moult);
        Eigen::Matrix<local_scalar_t__, -1, 1> q;
        q = Eigen::Matrix<local_scalar_t__, -1, 1>(N_moult);
        stan::math::fill(q, DUMMY_VAR__);
        
        current_statement__ = 59;
        validate_non_negative_index("mu", "N_old + N_moult",
                                    (N_old + N_moult));
        Eigen::Matrix<local_scalar_t__, -1, 1> mu;
        mu = Eigen::Matrix<local_scalar_t__, -1, 1>((N_old + N_moult));
        stan::math::fill(mu, DUMMY_VAR__);
        
        current_statement__ = 61;
        validate_non_negative_index("tau", "N_old + N_moult",
                                    (N_old + N_moult));
        Eigen::Matrix<local_scalar_t__, -1, 1> tau;
        tau = Eigen::Matrix<local_scalar_t__, -1, 1>((N_old + N_moult));
        stan::math::fill(tau, DUMMY_VAR__);
        
        current_statement__ = 63;
        validate_non_negative_index("sigma", "N_old + N_moult",
                                    (N_old + N_moult));
        Eigen::Matrix<local_scalar_t__, -1, 1> sigma;
        sigma = Eigen::Matrix<local_scalar_t__, -1, 1>((N_old + N_moult));
        stan::math::fill(sigma, DUMMY_VAR__);
        
        current_statement__ = 65;
        assign(mu, nil_index_list(),
          add(multiply(X_mu, beta_mu),
            rvalue(u_year_mean,
              cons_list(index_multi(year_factor), nil_index_list()),
              "u_year_mean")), "assigning variable mu");
        current_statement__ = 66;
        assign(tau, nil_index_list(),
          add(multiply(X_tau, beta_tau),
            rvalue(u_year_duration,
              cons_list(index_multi(year_factor), nil_index_list()),
              "u_year_duration")), "assigning variable tau");
        current_statement__ = 67;
        assign(sigma, nil_index_list(),
          stan::math::exp(multiply(X_sigma, beta_sigma)),
          "assigning variable sigma");
        current_statement__ = 75;
        for (int i = 1; i <= N_old; ++i) {
          current_statement__ = 73;
          if (logical_eq(is_replicated[(individual[(i - 1)] - 1)], 1)) {
            current_statement__ = 71;
            assign(P, cons_list(index_uni(i), nil_index_list()),
              (1 -
                Phi(
                  ((old_dates[(i - 1)] -
                     (mu[(i - 1)] + mu_ind[(individual[(i - 1)] - 1)])) /
                    sigma_mu_ind))), "assigning variable P");
          } else {
            current_statement__ = 68;
            assign(P, cons_list(index_uni(i), nil_index_list()),
              (1 -
                Phi(((old_dates[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
              "assigning variable P");
            current_statement__ = 69;
            assign(Rt, cons_list(index_uni(i), nil_index_list()),
              Phi(
                (((old_dates[(i - 1)] - tau[(i - 1)]) - mu[(i - 1)]) /
                  sigma[(i - 1)])), "assigning variable Rt");
          }}
        current_statement__ = 83;
        for (int i = 1; i <= N_moult; ++i) {
          current_statement__ = 81;
          if (logical_eq(is_replicated[(individual[((i + N_old) - 1)] - 1)],
                1)) {
            current_statement__ = 79;
            assign(q, cons_list(index_uni(i), nil_index_list()),
              normal_lpdf<false>(
                (moult_dates[(i - 1)] -
                  (moult_indices[(i - 1)] * tau[((i + N_old) - 1)])),
                (mu[((i + N_old) - 1)] +
                  mu_ind[(individual[((i + N_old) - 1)] - 1)]), sigma_mu_ind),
              "assigning variable q");
          } else {
            current_statement__ = 76;
            assign(Ru, cons_list(index_uni(i), nil_index_list()),
              Phi(
                (((moult_dates[(i - 1)] - tau[((i + N_old) - 1)]) -
                   mu[((i + N_old) - 1)]) / sigma[((i + N_old) - 1)])),
              "assigning variable Ru");
            current_statement__ = 77;
            assign(q, cons_list(index_uni(i), nil_index_list()),
              (stan::math::log(tau[((i + N_old) - 1)]) +
                normal_lpdf<false>(
                  (moult_dates[(i - 1)] -
                    (moult_indices[(i - 1)] * tau[((i + N_old) - 1)])),
                  mu[((i + N_old) - 1)], sigma[((i + N_old) - 1)])),
              "assigning variable q");
          }}
        current_statement__ = 84;
        lp_accum__.add(
          normal_lpdf<propto__>(
            rvalue(mu_ind,
              cons_list(index_multi(replicated_individuals),
                nil_index_list()), "mu_ind"), 0,
            rvalue(
              rvalue(sigma,
  cons_list(index_multi(individual_first_index), nil_index_list()), "sigma"),
              cons_list(index_multi(replicated_individuals),
                nil_index_list()), "sigma[individual_first_index]")));
        current_statement__ = 85;
        lp_accum__.add(
          (((sum(stan::math::log(P)) -
              sum(
                log1m(
                  rvalue(Rt,
                    cons_list(index_multi(not_replicated_old),
                      nil_index_list()), "Rt")))) + sum(q)) -
            sum(
              log1m(
                rvalue(Ru,
                  cons_list(index_multi(not_replicated_moult),
                    nil_index_list()), "Ru")))));
        current_statement__ = 86;
        lp_accum__.add(normal_lpdf<propto__>(u_year_mean, 0, sd_year_mean));
        current_statement__ = 87;
        lp_accum__.add(
          normal_lpdf<propto__>(u_year_duration, 0, sd_year_duration));
        current_statement__ = 89;
        if (logical_lt(beta_mu[(1 - 1)], 0)) {
          current_statement__ = 89;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 88;
          if (logical_gt(beta_mu[(1 - 1)], 366)) {
            current_statement__ = 88;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 88;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(366, 150, 50),
                 normal_cdf_log(0, 150, 50)));
          }
        }
        current_statement__ = 90;
        lp_accum__.add(normal_lpdf<propto__>(beta_mu[(1 - 1)], 150, 50));
        current_statement__ = 92;
        if (logical_lt(beta_tau[(1 - 1)], 0)) {
          current_statement__ = 92;
          lp_accum__.add(stan::math::negative_infinity());
        } else {
          current_statement__ = 91;
          if (logical_gt(beta_tau[(1 - 1)], 366)) {
            current_statement__ = 91;
            lp_accum__.add(stan::math::negative_infinity());
          } else {
            current_statement__ = 91;
            lp_accum__.add(
              -log_diff_exp(normal_cdf_log(366, 100, 30),
                 normal_cdf_log(0, 100, 30)));
          }
        }
        current_statement__ = 93;
        lp_accum__.add(normal_lpdf<propto__>(beta_tau[(1 - 1)], 100, 30));
        current_statement__ = 94;
        lp_accum__.add(normal_lpdf<propto__>(beta_sigma[(1 - 1)], 0, 5));
        current_statement__ = 95;
        lp_accum__.add(normal_lpdf<propto__>(sigma_mu_ind, 0, 1));
        current_statement__ = 112;
        if (logical_gt(beta_sd, 0)) {
          current_statement__ = 100;
          if (logical_gt(N_pred_mu, 1)) {
            current_statement__ = 98;
            for (int i = 2; i <= N_pred_mu; ++i) {
              current_statement__ = 96;
              lp_accum__.add(
                normal_lpdf<propto__>(beta_mu[(i - 1)], 0, beta_sd));}
          } 
          current_statement__ = 105;
          if (logical_gt(N_pred_tau, 1)) {
            current_statement__ = 103;
            for (int i = 2; i <= N_pred_tau; ++i) {
              current_statement__ = 101;
              lp_accum__.add(
                normal_lpdf<propto__>(beta_tau[(i - 1)], 0, beta_sd));}
          } 
          current_statement__ = 110;
          if (logical_gt(N_pred_sigma, 1)) {
            current_statement__ = 108;
            for (int i = 2; i <= N_pred_sigma; ++i) {
              current_statement__ = 106;
              lp_accum__.add(
                normal_lpdf<propto__>(beta_sigma[(i - 1)], 0, beta_sd));}
          } 
        } 
        current_statement__ = 113;
        lp_accum__.add(normal_lpdf<propto__>(sd_year_mean, 0, 2));
        current_statement__ = 114;
        lp_accum__.add(normal_lpdf<propto__>(sd_year_duration, 0, 2));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, stan::require_std_vector_vt<std::is_floating_point, VecVar>* = nullptr>
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.resize(0);
    stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
    static const char* function__ = "model_uz5_recap_annual_raneff_namespace::write_array";
(void) function__;  // suppress unused var warning
    (void) function__;  // suppress unused var warning
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> beta_mu;
      beta_mu = Eigen::Matrix<double, -1, 1>(N_pred_mu);
      stan::math::fill(beta_mu, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 1;
      beta_mu = in__.vector(N_pred_mu);
      Eigen::Matrix<double, -1, 1> beta_tau;
      beta_tau = Eigen::Matrix<double, -1, 1>(N_pred_tau);
      stan::math::fill(beta_tau, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 2;
      beta_tau = in__.vector(N_pred_tau);
      Eigen::Matrix<double, -1, 1> beta_sigma;
      beta_sigma = Eigen::Matrix<double, -1, 1>(N_pred_sigma);
      stan::math::fill(beta_sigma, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 3;
      beta_sigma = in__.vector(N_pred_sigma);
      Eigen::Matrix<double, -1, 1> mu_ind;
      mu_ind = Eigen::Matrix<double, -1, 1>(N_ind);
      stan::math::fill(mu_ind, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 4;
      mu_ind = in__.vector(N_ind);
      Eigen::Matrix<double, -1, 1> u_year_mean;
      u_year_mean = Eigen::Matrix<double, -1, 1>(N_years);
      stan::math::fill(u_year_mean, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 5;
      u_year_mean = in__.vector(N_years);
      Eigen::Matrix<double, -1, 1> u_year_duration;
      u_year_duration = Eigen::Matrix<double, -1, 1>(N_years);
      stan::math::fill(u_year_duration, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 6;
      u_year_duration = in__.vector(N_years);
      double sd_year_mean;
      sd_year_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_year_mean = in__.scalar();
      current_statement__ = 7;
      sd_year_mean = stan::math::lb_constrain(sd_year_mean, 0);
      double sd_year_duration;
      sd_year_duration = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_year_duration = in__.scalar();
      current_statement__ = 8;
      sd_year_duration = stan::math::lb_constrain(sd_year_duration, 0);
      double sigma_mu_ind;
      sigma_mu_ind = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_mu_ind = in__.scalar();
      current_statement__ = 9;
      sigma_mu_ind = stan::math::lb_constrain(sigma_mu_ind, 0);
      double sigma_intercept;
      sigma_intercept = std::numeric_limits<double>::quiet_NaN();
      
      double beta_star;
      beta_star = std::numeric_limits<double>::quiet_NaN();
      
      Eigen::Matrix<double, -1, 1> mu_ind_star;
      mu_ind_star = Eigen::Matrix<double, -1, 1>(N_ind_rep);
      stan::math::fill(mu_ind_star, std::numeric_limits<double>::quiet_NaN());
      
      double finite_sd;
      finite_sd = std::numeric_limits<double>::quiet_NaN();
      
      for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
        vars__.emplace_back(beta_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
        vars__.emplace_back(beta_tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
        vars__.emplace_back(beta_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(mu_ind[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        vars__.emplace_back(u_year_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        vars__.emplace_back(u_year_duration[(sym1__ - 1)]);}
      vars__.emplace_back(sd_year_mean);
      vars__.emplace_back(sd_year_duration);
      vars__.emplace_back(sigma_mu_ind);
      if (logical_negation((primitive_value(emit_transformed_parameters__) ||
            primitive_value(emit_generated_quantities__)))) {
        return ;
      } 
      current_statement__ = 10;
      sigma_intercept = stan::math::exp(beta_sigma[(1 - 1)]);
      current_statement__ = 11;
      beta_star = (beta_mu[(1 - 1)] +
                    mean(
                      rvalue(mu_ind,
                        cons_list(index_multi(replicated_individuals),
                          nil_index_list()), "mu_ind")));
      current_statement__ = 12;
      assign(mu_ind_star, nil_index_list(),
        subtract(
          rvalue(mu_ind,
            cons_list(index_multi(replicated_individuals), nil_index_list()),
            "mu_ind"),
          mean(
            rvalue(mu_ind,
              cons_list(index_multi(replicated_individuals),
                nil_index_list()), "mu_ind"))),
        "assigning variable mu_ind_star");
      current_statement__ = 13;
      finite_sd = sd(mu_ind_star);
      if (emit_transformed_parameters__) {
        vars__.emplace_back(sigma_intercept);
        vars__.emplace_back(beta_star);
        for (int sym1__ = 1; sym1__ <= N_ind_rep; ++sym1__) {
          vars__.emplace_back(mu_ind_star[(sym1__ - 1)]);}
        vars__.emplace_back(finite_sd);
      } 
      if (logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> Rt;
      Rt = Eigen::Matrix<double, -1, 1>(N_old);
      stan::math::fill(Rt, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> P;
      P = Eigen::Matrix<double, -1, 1>(N_old);
      stan::math::fill(P, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> Ru;
      Ru = Eigen::Matrix<double, -1, 1>(N_moult);
      stan::math::fill(Ru, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> q;
      q = Eigen::Matrix<double, -1, 1>(N_moult);
      stan::math::fill(q, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> mu;
      mu = Eigen::Matrix<double, -1, 1>(mu_1dim__);
      stan::math::fill(mu, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> tau;
      tau = Eigen::Matrix<double, -1, 1>(tau_1dim__);
      stan::math::fill(tau, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> sigma;
      sigma = Eigen::Matrix<double, -1, 1>(sigma_1dim__);
      stan::math::fill(sigma, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> log_lik;
      log_lik = Eigen::Matrix<double, -1, 1>(log_lik_1dim__);
      stan::math::fill(log_lik, std::numeric_limits<double>::quiet_NaN());
      
      Eigen::Matrix<double, -1, 1> beta_mu_out;
      beta_mu_out = Eigen::Matrix<double, -1, 1>(N_pred_mu);
      stan::math::fill(beta_mu_out, std::numeric_limits<double>::quiet_NaN());
      
      current_statement__ = 27;
      if (logical_gt(N_pred_mu, 1)) {
        current_statement__ = 25;
        assign(beta_mu_out, nil_index_list(),
          append_row(beta_star,
            rvalue(beta_mu,
              cons_list(index_min_max(2, N_pred_mu), nil_index_list()),
              "beta_mu")), "assigning variable beta_mu_out");
      } else {
        current_statement__ = 23;
        assign(beta_mu_out, cons_list(index_uni(1), nil_index_list()),
          beta_star, "assigning variable beta_mu_out");
      }
      current_statement__ = 28;
      assign(mu, nil_index_list(),
        add(multiply(X_mu, beta_mu),
          rvalue(u_year_mean,
            cons_list(index_multi(year_factor), nil_index_list()),
            "u_year_mean")), "assigning variable mu");
      current_statement__ = 29;
      assign(tau, nil_index_list(),
        add(multiply(X_tau, beta_tau),
          rvalue(u_year_duration,
            cons_list(index_multi(year_factor), nil_index_list()),
            "u_year_duration")), "assigning variable tau");
      current_statement__ = 30;
      assign(sigma, nil_index_list(),
        stan::math::exp(multiply(X_sigma, beta_sigma)),
        "assigning variable sigma");
      current_statement__ = 40;
      for (int i = 1; i <= N_old; ++i) {
        current_statement__ = 38;
        if (logical_eq(is_replicated[(individual[(i - 1)] - 1)], 1)) {
          current_statement__ = 35;
          assign(P, cons_list(index_uni(i), nil_index_list()),
            (1 -
              Phi(
                ((old_dates[(i - 1)] -
                   (mu[(i - 1)] + mu_ind[(individual[(i - 1)] - 1)])) /
                  sigma_mu_ind))), "assigning variable P");
          current_statement__ = 36;
          assign(log_lik, cons_list(index_uni(i), nil_index_list()),
            stan::math::log(P[(i - 1)]), "assigning variable log_lik");
        } else {
          current_statement__ = 31;
          assign(P, cons_list(index_uni(i), nil_index_list()),
            (1 - Phi(((old_dates[(i - 1)] - mu[(i - 1)]) / sigma[(i - 1)]))),
            "assigning variable P");
          current_statement__ = 32;
          assign(Rt, cons_list(index_uni(i), nil_index_list()),
            Phi(
              (((old_dates[(i - 1)] - tau[(i - 1)]) - mu[(i - 1)]) /
                sigma[(i - 1)])), "assigning variable Rt");
          current_statement__ = 33;
          assign(log_lik, cons_list(index_uni(i), nil_index_list()),
            (stan::math::log(P[(i - 1)]) - log1m(Rt[(i - 1)])),
            "assigning variable log_lik");
        }}
      current_statement__ = 50;
      for (int i = 1; i <= N_moult; ++i) {
        current_statement__ = 48;
        if (logical_eq(is_replicated[(individual[((i + N_old) - 1)] - 1)], 1)) {
          current_statement__ = 45;
          assign(q, cons_list(index_uni(i), nil_index_list()),
            normal_lpdf<false>(
              (moult_dates[(i - 1)] -
                (moult_indices[(i - 1)] * tau[((i + N_old) - 1)])),
              (mu[((i + N_old) - 1)] +
                mu_ind[(individual[((i + N_old) - 1)] - 1)]), sigma_mu_ind),
            "assigning variable q");
          current_statement__ = 46;
          assign(log_lik,
            cons_list(index_uni((N_old + i)), nil_index_list()), q[(i - 1)],
            "assigning variable log_lik");
        } else {
          current_statement__ = 41;
          assign(Ru, cons_list(index_uni(i), nil_index_list()),
            Phi(
              (((moult_dates[(i - 1)] - tau[((i + N_old) - 1)]) -
                 mu[((i + N_old) - 1)]) / sigma[((i + N_old) - 1)])),
            "assigning variable Ru");
          current_statement__ = 42;
          assign(q, cons_list(index_uni(i), nil_index_list()),
            (stan::math::log(tau[((i + N_old) - 1)]) +
              normal_lpdf<false>(
                (moult_dates[(i - 1)] -
                  (moult_indices[(i - 1)] * tau[((i + N_old) - 1)])),
                mu[((i + N_old) - 1)], sigma[((i + N_old) - 1)])),
            "assigning variable q");
          current_statement__ = 43;
          assign(log_lik,
            cons_list(index_uni((N_old + i)), nil_index_list()),
            (q[(i - 1)] - log1m(Ru[(i - 1)])), "assigning variable log_lik");
        }}
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        vars__.emplace_back(Rt[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        vars__.emplace_back(P[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        vars__.emplace_back(Ru[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        vars__.emplace_back(q[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        vars__.emplace_back(mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        vars__.emplace_back(tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        vars__.emplace_back(sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        vars__.emplace_back(log_lik[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
        vars__.emplace_back(beta_mu_out[(sym1__ - 1)]);}
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, stan::require_std_vector_t<VecVar>* = nullptr, stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void transform_inits_impl(const stan::io::var_context& context__,
                                   VecI& params_i__, VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    vars__.clear();
    vars__.reserve(num_params_r__);
    
    try {
      int pos__;
      pos__ = std::numeric_limits<int>::min();
      
      pos__ = 1;
      Eigen::Matrix<double, -1, 1> beta_mu;
      beta_mu = Eigen::Matrix<double, -1, 1>(N_pred_mu);
      stan::math::fill(beta_mu, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_mu_flat__;
        current_statement__ = 1;
        assign(beta_mu_flat__, nil_index_list(), context__.vals_r("beta_mu"),
          "assigning variable beta_mu_flat__");
        current_statement__ = 1;
        pos__ = 1;
        current_statement__ = 1;
        for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
          current_statement__ = 1;
          assign(beta_mu, cons_list(index_uni(sym1__), nil_index_list()),
            beta_mu_flat__[(pos__ - 1)], "assigning variable beta_mu");
          current_statement__ = 1;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_tau;
      beta_tau = Eigen::Matrix<double, -1, 1>(N_pred_tau);
      stan::math::fill(beta_tau, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_tau_flat__;
        current_statement__ = 2;
        assign(beta_tau_flat__, nil_index_list(),
          context__.vals_r("beta_tau"), "assigning variable beta_tau_flat__");
        current_statement__ = 2;
        pos__ = 1;
        current_statement__ = 2;
        for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
          current_statement__ = 2;
          assign(beta_tau, cons_list(index_uni(sym1__), nil_index_list()),
            beta_tau_flat__[(pos__ - 1)], "assigning variable beta_tau");
          current_statement__ = 2;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> beta_sigma;
      beta_sigma = Eigen::Matrix<double, -1, 1>(N_pred_sigma);
      stan::math::fill(beta_sigma, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> beta_sigma_flat__;
        current_statement__ = 3;
        assign(beta_sigma_flat__, nil_index_list(),
          context__.vals_r("beta_sigma"),
          "assigning variable beta_sigma_flat__");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
          current_statement__ = 3;
          assign(beta_sigma, cons_list(index_uni(sym1__), nil_index_list()),
            beta_sigma_flat__[(pos__ - 1)], "assigning variable beta_sigma");
          current_statement__ = 3;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> mu_ind;
      mu_ind = Eigen::Matrix<double, -1, 1>(N_ind);
      stan::math::fill(mu_ind, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> mu_ind_flat__;
        current_statement__ = 4;
        assign(mu_ind_flat__, nil_index_list(), context__.vals_r("mu_ind"),
          "assigning variable mu_ind_flat__");
        current_statement__ = 4;
        pos__ = 1;
        current_statement__ = 4;
        for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
          current_statement__ = 4;
          assign(mu_ind, cons_list(index_uni(sym1__), nil_index_list()),
            mu_ind_flat__[(pos__ - 1)], "assigning variable mu_ind");
          current_statement__ = 4;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> u_year_mean;
      u_year_mean = Eigen::Matrix<double, -1, 1>(N_years);
      stan::math::fill(u_year_mean, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> u_year_mean_flat__;
        current_statement__ = 5;
        assign(u_year_mean_flat__, nil_index_list(),
          context__.vals_r("u_year_mean"),
          "assigning variable u_year_mean_flat__");
        current_statement__ = 5;
        pos__ = 1;
        current_statement__ = 5;
        for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
          current_statement__ = 5;
          assign(u_year_mean, cons_list(index_uni(sym1__), nil_index_list()),
            u_year_mean_flat__[(pos__ - 1)], "assigning variable u_year_mean");
          current_statement__ = 5;
          pos__ = (pos__ + 1);}
      }
      Eigen::Matrix<double, -1, 1> u_year_duration;
      u_year_duration = Eigen::Matrix<double, -1, 1>(N_years);
      stan::math::fill(u_year_duration, std::numeric_limits<double>::quiet_NaN());
      
      {
        std::vector<local_scalar_t__> u_year_duration_flat__;
        current_statement__ = 6;
        assign(u_year_duration_flat__, nil_index_list(),
          context__.vals_r("u_year_duration"),
          "assigning variable u_year_duration_flat__");
        current_statement__ = 6;
        pos__ = 1;
        current_statement__ = 6;
        for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
          current_statement__ = 6;
          assign(u_year_duration,
            cons_list(index_uni(sym1__), nil_index_list()),
            u_year_duration_flat__[(pos__ - 1)],
            "assigning variable u_year_duration");
          current_statement__ = 6;
          pos__ = (pos__ + 1);}
      }
      double sd_year_mean;
      sd_year_mean = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_year_mean = context__.vals_r("sd_year_mean")[(1 - 1)];
      double sd_year_mean_free__;
      sd_year_mean_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 7;
      sd_year_mean_free__ = stan::math::lb_free(sd_year_mean, 0);
      double sd_year_duration;
      sd_year_duration = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_year_duration = context__.vals_r("sd_year_duration")[(1 - 1)];
      double sd_year_duration_free__;
      sd_year_duration_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 8;
      sd_year_duration_free__ = stan::math::lb_free(sd_year_duration, 0);
      double sigma_mu_ind;
      sigma_mu_ind = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_mu_ind = context__.vals_r("sigma_mu_ind")[(1 - 1)];
      double sigma_mu_ind_free__;
      sigma_mu_ind_free__ = std::numeric_limits<double>::quiet_NaN();
      
      current_statement__ = 9;
      sigma_mu_ind_free__ = stan::math::lb_free(sigma_mu_ind, 0);
      for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
        vars__.emplace_back(beta_mu[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
        vars__.emplace_back(beta_tau[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
        vars__.emplace_back(beta_sigma[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
        vars__.emplace_back(mu_ind[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        vars__.emplace_back(u_year_mean[(sym1__ - 1)]);}
      for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
        vars__.emplace_back(u_year_duration[(sym1__ - 1)]);}
      vars__.emplace_back(sd_year_mean_free__);
      vars__.emplace_back(sd_year_duration_free__);
      vars__.emplace_back(sigma_mu_ind_free__);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
      // Next line prevents compiler griping about no return
      throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***"); 
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__.clear();
    names__.emplace_back("beta_mu");
    names__.emplace_back("beta_tau");
    names__.emplace_back("beta_sigma");
    names__.emplace_back("mu_ind");
    names__.emplace_back("u_year_mean");
    names__.emplace_back("u_year_duration");
    names__.emplace_back("sd_year_mean");
    names__.emplace_back("sd_year_duration");
    names__.emplace_back("sigma_mu_ind");
    names__.emplace_back("sigma_intercept");
    names__.emplace_back("beta_star");
    names__.emplace_back("mu_ind_star");
    names__.emplace_back("finite_sd");
    names__.emplace_back("Rt");
    names__.emplace_back("P");
    names__.emplace_back("Ru");
    names__.emplace_back("q");
    names__.emplace_back("mu");
    names__.emplace_back("tau");
    names__.emplace_back("sigma");
    names__.emplace_back("log_lik");
    names__.emplace_back("beta_mu_out");
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    dimss__.clear();
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_pred_mu)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_pred_tau)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(N_pred_sigma)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ind)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_years)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_years)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_ind_rep)});
    
    dimss__.emplace_back(std::vector<size_t>{});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_old)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_old)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_moult)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_moult)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(mu_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(tau_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(sigma_1dim__)});
    
    dimss__.emplace_back(std::vector<size_t>{
                                             static_cast<size_t>(log_lik_1dim__)
                                             });
    
    dimss__.emplace_back(std::vector<size_t>{static_cast<size_t>(N_pred_mu)});
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_ind" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u_year_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u_year_duration" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_year_mean");
    param_names__.emplace_back(std::string() + "sd_year_duration");
    param_names__.emplace_back(std::string() + "sigma_mu_ind");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_intercept");
      param_names__.emplace_back(std::string() + "beta_star");
      for (int sym1__ = 1; sym1__ <= N_ind_rep; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_ind_star" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "finite_sd");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Ru" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_mu_out" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_mu" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pred_tau; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_tau" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_pred_sigma; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "beta_sigma" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_ind; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu_ind" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u_year_mean" + '.' + std::to_string(sym1__));
      }}
    for (int sym1__ = 1; sym1__ <= N_years; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "u_year_duration" + '.' + std::to_string(sym1__));
      }}
    param_names__.emplace_back(std::string() + "sd_year_mean");
    param_names__.emplace_back(std::string() + "sd_year_duration");
    param_names__.emplace_back(std::string() + "sigma_mu_ind");
    if (emit_transformed_parameters__) {
      param_names__.emplace_back(std::string() + "sigma_intercept");
      param_names__.emplace_back(std::string() + "beta_star");
      for (int sym1__ = 1; sym1__ <= N_ind_rep; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu_ind_star" + '.' + std::to_string(sym1__));
        }}
      param_names__.emplace_back(std::string() + "finite_sd");
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Rt" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_old; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "P" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "Ru" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_moult; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "q" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= mu_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= tau_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "tau" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= sigma_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= log_lik_1dim__; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "log_lik" + '.' + std::to_string(sym1__));
        }}
      for (int sym1__ = 1; sym1__ <= N_pred_mu; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "beta_mu_out" + '.' + std::to_string(sym1__));
        }}
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_mu\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_mu << "},\"block\":\"parameters\"},{\"name\":\"beta_tau\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_tau << "},\"block\":\"parameters\"},{\"name\":\"beta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_sigma << "},\"block\":\"parameters\"},{\"name\":\"mu_ind\",\"type\":{\"name\":\"vector\",\"length\":" << N_ind << "},\"block\":\"parameters\"},{\"name\":\"u_year_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N_years << "},\"block\":\"parameters\"},{\"name\":\"u_year_duration\",\"type\":{\"name\":\"vector\",\"length\":" << N_years << "},\"block\":\"parameters\"},{\"name\":\"sd_year_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_year_duration\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_mu_ind\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_ind_star\",\"type\":{\"name\":\"vector\",\"length\":" << N_ind_rep << "},\"block\":\"transformed_parameters\"},{\"name\":\"finite_sd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Rt\",\"type\":{\"name\":\"vector\",\"length\":" << N_old << "},\"block\":\"generated_quantities\"},{\"name\":\"P\",\"type\":{\"name\":\"vector\",\"length\":" << N_old << "},\"block\":\"generated_quantities\"},{\"name\":\"Ru\",\"type\":{\"name\":\"vector\",\"length\":" << N_moult << "},\"block\":\"generated_quantities\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" << N_moult << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << mu_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << tau_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << log_lik_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_mu_out\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_mu << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    stringstream s__;
    s__ << "[{\"name\":\"beta_mu\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_mu << "},\"block\":\"parameters\"},{\"name\":\"beta_tau\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_tau << "},\"block\":\"parameters\"},{\"name\":\"beta_sigma\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_sigma << "},\"block\":\"parameters\"},{\"name\":\"mu_ind\",\"type\":{\"name\":\"vector\",\"length\":" << N_ind << "},\"block\":\"parameters\"},{\"name\":\"u_year_mean\",\"type\":{\"name\":\"vector\",\"length\":" << N_years << "},\"block\":\"parameters\"},{\"name\":\"u_year_duration\",\"type\":{\"name\":\"vector\",\"length\":" << N_years << "},\"block\":\"parameters\"},{\"name\":\"sd_year_mean\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sd_year_duration\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_mu_ind\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"sigma_intercept\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"beta_star\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"mu_ind_star\",\"type\":{\"name\":\"vector\",\"length\":" << N_ind_rep << "},\"block\":\"transformed_parameters\"},{\"name\":\"finite_sd\",\"type\":{\"name\":\"real\"},\"block\":\"transformed_parameters\"},{\"name\":\"Rt\",\"type\":{\"name\":\"vector\",\"length\":" << N_old << "},\"block\":\"generated_quantities\"},{\"name\":\"P\",\"type\":{\"name\":\"vector\",\"length\":" << N_old << "},\"block\":\"generated_quantities\"},{\"name\":\"Ru\",\"type\":{\"name\":\"vector\",\"length\":" << N_moult << "},\"block\":\"generated_quantities\"},{\"name\":\"q\",\"type\":{\"name\":\"vector\",\"length\":" << N_moult << "},\"block\":\"generated_quantities\"},{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" << mu_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"tau\",\"type\":{\"name\":\"vector\",\"length\":" << tau_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" << sigma_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"log_lik\",\"type\":{\"name\":\"vector\",\"length\":" << log_lik_1dim__ << "},\"block\":\"generated_quantities\"},{\"name\":\"beta_mu_out\",\"type\":{\"name\":\"vector\",\"length\":" << N_pred_mu << "},\"block\":\"generated_quantities\"}]";
    return s__.str();
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      std::vector<double> vars_vec(vars.size());
      std::vector<int> params_i;
      write_array_impl(base_rng, params_r, params_i, vars_vec,
          emit_transformed_parameters, emit_generated_quantities, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i) {
        vars.coeffRef(i) = vars_vec[i];
      }
    }
    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      write_array_impl(base_rng, params_r, params_i, vars, emit_transformed_parameters, emit_generated_quantities, pstream);
    }
    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }
  
    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits_impl(context, params_i, params_r_vec, pstream);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i) {
        params_r.coeffRef(i) = params_r_vec[i];
      }
    }
    inline void transform_inits(const stan::io::var_context& context,
                                std::vector<int>& params_i,
                                std::vector<double>& vars,
                                std::ostream* pstream = nullptr) const final {
      transform_inits_impl(context, params_i, vars, pstream);
    }        
};
}
using stan_model = model_uz5_recap_annual_raneff_namespace::model_uz5_recap_annual_raneff;
#ifndef USING_R
// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_uz5_recap_annual_raneff_namespace::profiles__;
}
#endif
#endif
